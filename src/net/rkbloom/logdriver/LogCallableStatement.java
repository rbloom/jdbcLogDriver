/*
 * Copyright 2005 Ryan Bloom
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
package net.rkbloom.logdriver;

import net.rkbloom.logdriver.util.TypeConverter;

import org.apache.log4j.Logger;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;
import java.util.TreeMap;


/**
 * LogCallableStatement
 * @version $Rev$
 */
public class LogCallableStatement implements CallableStatement {

    private CallableStatement embedded;
    private Connection conn;
    private String sql;
    private Map<Object, Object> bindParams;
    private Map<Object, Object> outParams;
    private static Logger log = Logger.getLogger(LogCallableStatement.class);
    
    public LogCallableStatement(CallableStatement cs, Connection c, String s) {
        embedded = cs;
        conn = c;
        sql = s;
        // we want to have the bind parameters print out in order
        // otherwise it is difficult to match the parameters with
        // the question marks (?) in the query.
        bindParams = new TreeMap<Object, Object>();
        outParams = new TreeMap<Object, Object>();
    }
    
    // This looks useless, but it isn't.  I have centralized the logging in
    // this class so that I can easily replace all of the '?'s with the actual
    // values.
    private void logStatement() {
        logStatement(sql);
    }

    private void logStatement(String sql) {
        String replaceBind = System.getProperty("replace.bindParams", "0");
        
        if (replaceBind.equals("1") || replaceBind.equals("true")) {
            String logStr = sql;
            int i = 1;
            while (logStr.indexOf('?') >= 0) {
                logStr = logStr.replaceFirst("\\?", 
                                    bindParams.get(new Integer(i++)).toString());
            }
            log.debug("executing CallableStatement: " + logStr);
            return;
        }
        
        log.debug("executing CallableStatement: '" + sql + "' with bind " +
                  "parameters: " + bindParams + " out parameters: " + outParams);    
    }
    
    /**
     * {@inheritDoc}
     */
    public void addBatch() throws SQLException {
        logStatement();
        embedded.addBatch();
    }

    /**
     * {@inheritDoc}
     */
    public void addBatch(String sql) throws SQLException {
        logStatement(sql);
        embedded.addBatch(sql);
    }

    /**
     * {@inheritDoc}
     */
    public void cancel() throws SQLException {
        embedded.cancel();
    }

    /**
     * {@inheritDoc}
     */
    public void clearBatch() throws SQLException {
        embedded.clearBatch();
    }

    /**
     * {@inheritDoc}
     */
    public void clearParameters() throws SQLException {
        embedded.clearParameters();
        bindParams.clear();
    }

    /**
     * {@inheritDoc}
     */
    public void clearWarnings() throws SQLException {
        embedded.clearWarnings();
    }


    /**
     * {@inheritDoc}
     */
    public void close() throws SQLException {
        embedded.close();
    }


    /**
     * {@inheritDoc}
     */
    public boolean execute() throws SQLException {
        logStatement();
        return embedded.execute();
    }


    /**
     * {@inheritDoc}
     */
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        logStatement(sql);
        return embedded.execute(sql, autoGeneratedKeys);
    }


    /**
     * {@inheritDoc}
     */
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        logStatement(sql);
        return embedded.execute(sql, columnIndexes);
    }

    /**
     * {@inheritDoc}
     */
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        logStatement(sql);
        return embedded.execute(sql, columnNames);
    }

    /**
     * {@inheritDoc}
     */
    public boolean execute(String sql) throws SQLException {
        logStatement(sql);
        return embedded.execute(sql);
    }

    /**
     * {@inheritDoc}
     */
    public int[] executeBatch() throws SQLException {
        logStatement();
        return embedded.executeBatch();
    }

    /**
     * {@inheritDoc}
     */
    public ResultSet executeQuery() throws SQLException {
        logStatement();
        return embedded.executeQuery();
    }

    /**
     * {@inheritDoc}
     */
    public ResultSet executeQuery(String sql) throws SQLException {
        logStatement(sql);
        return embedded.executeQuery(sql);
    }

    /**
     * {@inheritDoc}
     */
    public int executeUpdate() throws SQLException {
        logStatement();
        return embedded.executeUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        logStatement(sql);
        return embedded.executeUpdate(sql, autoGeneratedKeys);
    }

    /**
     * {@inheritDoc}
     */
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        logStatement(sql);
        return embedded.executeUpdate(sql, columnIndexes);
    }

    /**
     * {@inheritDoc}
     */
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        logStatement(sql);
        return embedded.executeUpdate(sql, columnNames);
    }


    /**
     * {@inheritDoc}
     */
    public int executeUpdate(String sql) throws SQLException {
        logStatement(sql);
        return embedded.executeUpdate(sql);
    }


    /**
     * {@inheritDoc}
     */
    public Connection getConnection() throws SQLException {
        return conn;
    }


    /**
     * {@inheritDoc}
     */
    public int getFetchDirection() throws SQLException {
        return embedded.getFetchDirection();
    }


    /**
     * {@inheritDoc}
     */
    public int getFetchSize() throws SQLException {
        return embedded.getFetchSize();
    }


    /**
     * {@inheritDoc}
     */
    public ResultSet getGeneratedKeys() throws SQLException {
        return embedded.getGeneratedKeys();
    }


    /**
     * {@inheritDoc}
     */
    public int getMaxFieldSize() throws SQLException {

        return embedded.getMaxFieldSize();
    }


    /**
     * {@inheritDoc}
     */
    public int getMaxRows() throws SQLException {
        return embedded.getMaxRows();
    }


    /**
     * {@inheritDoc}
     */
    public ResultSetMetaData getMetaData() throws SQLException {
        return embedded.getMetaData();
    }


    /**
     * {@inheritDoc}
     */
    public boolean getMoreResults() throws SQLException {
        return embedded.getMoreResults();
    }


    /**
     * {@inheritDoc}
     */
    public boolean getMoreResults(int current) throws SQLException {
        return embedded.getMoreResults(current);
    }


    /**
     * {@inheritDoc}
     */
    public ParameterMetaData getParameterMetaData() throws SQLException {
        return embedded.getParameterMetaData();
    }


    /**
     * {@inheritDoc}
     */
    public int getQueryTimeout() throws SQLException {
        return embedded.getQueryTimeout();
    }


    /**
     * {@inheritDoc}
     */
    public ResultSet getResultSet() throws SQLException {
        return embedded.getResultSet();
    }


    /**
     * {@inheritDoc}
     */
    public int getResultSetConcurrency() throws SQLException {
        return embedded.getResultSetConcurrency();
    }

    /**
     * {@inheritDoc}
     */
    public int getResultSetHoldability() throws SQLException {
        return embedded.getResultSetHoldability();
    }

    /**
     * {@inheritDoc}
     */
    public int getResultSetType() throws SQLException {
        return embedded.getResultSetType();
    }

    /**
     * {@inheritDoc}
     */
    public int getUpdateCount() throws SQLException {
        return embedded.getUpdateCount();
    }

    /**
     * {@inheritDoc}
     */
    public SQLWarning getWarnings() throws SQLException {
        return embedded.getWarnings();
    }

    /**
     * {@inheritDoc}
     */
    public void setArray(int i, Array x) throws SQLException {
        embedded.setArray(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setAsciiStream(int i, InputStream x, int length) throws SQLException {
        embedded.setAsciiStream(i, x, length);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBigDecimal(int i, BigDecimal x) throws SQLException {
        embedded.setBigDecimal(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBinaryStream(int i, InputStream x, int length) throws SQLException {
        embedded.setBinaryStream(i, x, length);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBlob(int i, Blob x) throws SQLException {
        embedded.setBlob(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBoolean(int i, boolean x) throws SQLException {
        embedded.setBoolean(i, x);
        bindParams.put(new Integer(i), new Boolean(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setByte(int i, byte x) throws SQLException {
        embedded.setByte(i, x);
        bindParams.put(new Integer(i), new Byte(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setBytes(int i, byte[] x) throws SQLException {
        embedded.setBytes(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setCharacterStream(int i, Reader reader, int length) throws SQLException {
        embedded.setCharacterStream(i, reader, length);
        bindParams.put(new Integer(i), reader);
    }

    /**
     * {@inheritDoc}
     */
    public void setClob(int i, Clob x) throws SQLException {
        embedded.setClob(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setCursorName(String name) throws SQLException {
        embedded.setCursorName(name);
    }

    /**
     * {@inheritDoc}
     */
    public void setDate(int i, Date x, Calendar cal) throws SQLException {
        embedded.setDate(i, x, cal);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setDate(int i, Date x) throws SQLException {
        embedded.setDate(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setDouble(int i, double x) throws SQLException {
        embedded.setDouble(i, x);
        bindParams.put(new Integer(i), new Double(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setEscapeProcessing(boolean enable) throws SQLException {
        embedded.setEscapeProcessing(enable);
    }

    /**
     * {@inheritDoc}
     */
    public void setFetchDirection(int direction) throws SQLException {
        embedded.setFetchDirection(direction);
    }

    /**
     * {@inheritDoc}
     */
    public void setFetchSize(int rows) throws SQLException {
        embedded.setFetchSize(rows);
    }

    /**
     * {@inheritDoc}
     */
    public void setFloat(int i, float x) throws SQLException {
        embedded.setFloat(i, x);
        bindParams.put(new Integer(i), new Float(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setInt(int i, int x) throws SQLException {
        embedded.setInt(i, x);
        bindParams.put(new Integer(i), new Integer(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setLong(int i, long x) throws SQLException {
        embedded.setLong(i, x);
        bindParams.put(new Integer(i), new Long(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setMaxFieldSize(int max) throws SQLException {
        embedded.setMaxFieldSize(max);
    }

    /**
     * {@inheritDoc}
     */
    public void setMaxRows(int max) throws SQLException {
        embedded.setMaxRows(max);
    }

    /**
     * {@inheritDoc}
     */
    public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
        embedded.setNull(paramIndex, sqlType, typeName);
    }

    /**
     * {@inheritDoc}
     */
    public void setNull(int i, int sqlType) throws SQLException {
        embedded.setNull(i, sqlType);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(int i, Object x, int targetSqlType, int scale) throws SQLException {
        embedded.setObject(i, x, targetSqlType, scale);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(int i, Object x, int targetSqlType) throws SQLException {
        embedded.setObject(i, x, targetSqlType);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(int i, Object x) throws SQLException {
        embedded.setObject(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setQueryTimeout(int seconds) throws SQLException {
        embedded.setQueryTimeout(seconds);
    }

    /**
     * {@inheritDoc}
     */
    public void setRef(int i, Ref x) throws SQLException {
        embedded.setRef(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setShort(int i, short x) throws SQLException {
        embedded.setShort(i, x);
        bindParams.put(new Integer(i), new Short(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setString(int i, String x) throws SQLException {
        embedded.setString(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTime(int i, Time x, Calendar cal) throws SQLException {
        embedded.setTime(i, x, cal);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTime(int i, Time x) throws SQLException {
        embedded.setTime(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTimestamp(int i, Timestamp x, Calendar cal) throws SQLException {
        embedded.setTimestamp(i, x, cal);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTimestamp(int i, Timestamp x) throws SQLException {
        embedded.setTimestamp(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     * @deprecated
     */
    public void setUnicodeStream(int i, InputStream x, int length) throws SQLException {
        embedded.setUnicodeStream(i, x, length);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setURL(int i, URL x) throws SQLException {
        embedded.setURL(i, x);
        bindParams.put(new Integer(i), x);
    }

    // Prepared Statement methods
    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(int i, int sqlType)
        throws SQLException {
        embedded.registerOutParameter(i, sqlType);

        outParams.put(new Integer(i),
                new OutParamMetadata(sqlType));
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(int i, int sqlType,
            int scale) throws SQLException {
        embedded.registerOutParameter(i, sqlType, scale);
        outParams.put(new Integer(i),
                new OutParamMetadata(sqlType, scale));
    }

    /**
     * {@inheritDoc}
     */
    public boolean wasNull() throws SQLException {
        return embedded.wasNull();
    }

    /**
     * {@inheritDoc}
     */
    public String getString(int i) throws SQLException {
        return embedded.getString(i);
    }

    /**
     * {@inheritDoc}
     */
    public boolean getBoolean(int i) throws SQLException {
        return embedded.getBoolean(i);
    }

    /**
     * {@inheritDoc}
     */
    public byte getByte(int i) throws SQLException {
        return embedded.getByte(i);
    }

    /**
     * {@inheritDoc}
     */
    public short getShort(int i) throws SQLException {
        return embedded.getShort(i);
    }

    /**
     * {@inheritDoc}
     */
    public int getInt(int i) throws SQLException {
        return embedded.getInt(i);
    }

    /**
     * {@inheritDoc}
     */
    public long getLong(int i) throws SQLException {
        return embedded.getLong(i);
    }

    /**
     * {@inheritDoc}
     */
    public float getFloat(int i) throws SQLException {
        return embedded.getFloat(i);
    }

    /**
     * {@inheritDoc}
     */
    public double getDouble(int i) throws SQLException {
        return embedded.getDouble(i);
    }

    /**
     * {@inheritDoc}
     */
    public BigDecimal getBigDecimal(int i, int scale)
        throws SQLException {
        return embedded.getBigDecimal(i);
    }

    /**
     * {@inheritDoc}
     */
    public byte[] getBytes(int i) throws SQLException {
        return embedded.getBytes(i);
    }

    /**
     * {@inheritDoc}
     */
    public Date getDate(int i) throws SQLException {
        return embedded.getDate(i);
    }

    /**
     * {@inheritDoc}
     */
    public Time getTime(int i) throws SQLException {
        return embedded.getTime(i);
    }

    /**
     * {@inheritDoc}
     */
    public Timestamp getTimestamp(int i) throws SQLException {
        return embedded.getTimestamp(i);
    }

    /**
     * {@inheritDoc}
     */
    public Object getObject(int i) throws SQLException {
        return embedded.getObject(i);
    }

    /**
     * {@inheritDoc}
     */
    public BigDecimal getBigDecimal(int i) throws SQLException {
        return embedded.getBigDecimal(i);
    }

    /**
     * {@inheritDoc}
     */
    public Ref getRef(int i) throws SQLException {
        return embedded.getRef(i);
    }

    /**
     * {@inheritDoc}
     */
    public Blob getBlob(int i) throws SQLException {
        return embedded.getBlob(i);
    }

    /**
     * {@inheritDoc}
     */
    public Clob getClob(int i) throws SQLException {
        return embedded.getClob(i);
    }

    /**
     * {@inheritDoc}
     */
    public Array getArray(int i) throws SQLException {
        return embedded.getArray(i);
    }

    /**
     * {@inheritDoc}
     */
    public Date getDate(int i, Calendar cal)
        throws SQLException {
        return embedded.getDate(i, cal);
    }

    /**
     * {@inheritDoc}
     */
    public Time getTime(int i, Calendar cal)
        throws SQLException {
        return embedded.getTime(i, cal);
    }

    /**
     * {@inheritDoc}
     */
    public Timestamp getTimestamp(int i, Calendar cal)
        throws SQLException {
        return embedded.getTimestamp(i, cal);
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(int paramIndex, int sqlType,
            String typeName) throws SQLException {
        embedded.registerOutParameter(paramIndex, sqlType, typeName);
        outParams.put(new Integer(paramIndex),
                new OutParamMetadata(sqlType, typeName));
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(String name, int sqlType)
        throws SQLException {
        embedded.registerOutParameter(name, sqlType);
        outParams.put(name, new OutParamMetadata(sqlType));
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(String name, int sqlType,
            int scale) throws SQLException {
        embedded.registerOutParameter(name, sqlType, scale);
        outParams.put(name, new OutParamMetadata(sqlType, scale));
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(String name, int sqlType,
            String typeName) throws SQLException {
        embedded.registerOutParameter(name, sqlType, typeName);
        outParams.put(name, new OutParamMetadata(sqlType, typeName));
    }

    /**
     * {@inheritDoc}
     */
    public URL getURL(int i) throws SQLException {
        return embedded.getURL(i);
    }

    /**
     * {@inheritDoc}
     */
    public void setURL(String name, URL val) throws SQLException {
        embedded.setURL(name, val);
        bindParams.put(name, val);
    }

    /**
     * {@inheritDoc}
     */
    public void setNull(String name, int sqlType)
        throws SQLException {
        embedded.setNull(name, sqlType);
        bindParams.put(name, null);
    }

    /**
     * {@inheritDoc}
     */
    public void setBoolean(String name, boolean x)
        throws SQLException {
        embedded.setBoolean(name, x);
        bindParams.put(name, new Boolean(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setByte(String name, byte x) throws SQLException {
        embedded.setByte(name, x);
        bindParams.put(name, new Byte(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setShort(String name, short x) throws SQLException {
        embedded.setShort(name, x);
        bindParams.put(name, new Short(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setInt(String name, int x) throws SQLException {
        embedded.setInt(name, x);
        bindParams.put(name, new Integer(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setLong(String name, long x) throws SQLException {
        embedded.setLong(name, x);
        bindParams.put(name, new Long(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setFloat(String name, float x) throws SQLException {
        embedded.setFloat(name, x);
        bindParams.put(name, new Float(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setDouble(String name, double x)
        throws SQLException {
        embedded.setDouble(name, x);
        bindParams.put(name, new Double(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setBigDecimal(String name, BigDecimal x)
        throws SQLException {
        embedded.setBigDecimal(name, x);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setString(String name, String x)
        throws SQLException {
        embedded.setString(name, x);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBytes(String name, byte[] x)
        throws SQLException {
        embedded.setBytes(name, x);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setDate(String name, Date x) throws SQLException {
        embedded.setDate(name, x);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTime(String name, Time x) throws SQLException {
        embedded.setTime(name, x);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTimestamp(String name, Timestamp x)
        throws SQLException {
        embedded.setTimestamp(name, x);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setAsciiStream(String name, InputStream x,
            int length) throws SQLException {
        embedded.setAsciiStream(name, x, length);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBinaryStream(String name, InputStream x,
            int length) throws SQLException {
        embedded.setBinaryStream(name, x, length);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(String name, Object x,
            int targetSqlType, int scale) throws SQLException {
        embedded.setObject(name, x, targetSqlType);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(String name, Object x,
            int targetSqlType) throws SQLException {
        embedded.setObject(name, x, targetSqlType);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(String name, Object x)
        throws SQLException {
        embedded.setObject(name, x);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setCharacterStream(String name, Reader reader,
            int length) throws SQLException {
        embedded.setCharacterStream(name, reader, length);
        bindParams.put(name, reader);
    }

    /**
     * {@inheritDoc}
     */
    public void setDate(String name, Date x, Calendar cal)
        throws SQLException {
        embedded.setDate(name, x, cal);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTime(String name, Time x, Calendar cal)
        throws SQLException {
        embedded.setTime(name, x, cal);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTimestamp(String name, Timestamp x,
            Calendar cal) throws SQLException {
        embedded.setTimestamp(name, x, cal);
        bindParams.put(name, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setNull(String name, int sqlType, String typeName)
        throws SQLException {
        embedded.setNull(name, sqlType, typeName);
        bindParams.put(name, null);
    }

    /**
     * {@inheritDoc}
     */
    public String getString(String name) throws SQLException {
        return embedded.getString(name);        
    }

    /**
     * {@inheritDoc}
     */
    public boolean getBoolean(String name) throws SQLException {
        return embedded.getBoolean(name);
    }

    /**
     * {@inheritDoc}
     */
    public byte getByte(String name) throws SQLException {
        return embedded.getByte(name);
    }

    /**
     * {@inheritDoc}
     */
    public short getShort(String name) throws SQLException {
        return embedded.getShort(name);
    }

    /**
     * {@inheritDoc}
     */
    public int getInt(String name) throws SQLException {
        return embedded.getInt(name);
    }

    /**
     * {@inheritDoc}
     */
    public long getLong(String name) throws SQLException {
        return embedded.getLong(name);
    }

    /**
     * {@inheritDoc}
     */
    public float getFloat(String name) throws SQLException {
        return embedded.getFloat(name);
    }

    /**
     * {@inheritDoc}
     */
    public double getDouble(String name) throws SQLException {
        return embedded.getDouble(name);
    }

    /**
     * {@inheritDoc}
     */
    public byte[] getBytes(String name) throws SQLException {
        return embedded.getBytes(name);
    }

    /**
     * {@inheritDoc}
     */
    public Date getDate(String name) throws SQLException {
        return embedded.getDate(name);
    }

    /**
     * {@inheritDoc}
     */
    public Time getTime(String name) throws SQLException {
        return embedded.getTime(name);
    }

    /**
     * {@inheritDoc}
     */
    public Timestamp getTimestamp(String name) throws SQLException {
        return embedded.getTimestamp(name);
    }

    /**
     * {@inheritDoc}
     */
    public Object getObject(String name) throws SQLException {
        return embedded.getObject(name);
    }

    /**
     * {@inheritDoc}
     */
    public BigDecimal getBigDecimal(String name) throws SQLException {
        return embedded.getBigDecimal(name);
    }

    /**
     * {@inheritDoc}
     */
    public Ref getRef(String name) throws SQLException {
        return embedded.getRef(name);
    }

    /**
     * {@inheritDoc}
     */
    public Blob getBlob(String name) throws SQLException {
        return embedded.getBlob(name);
    }

    /**
     * {@inheritDoc}
     */
    public Clob getClob(String name) throws SQLException {
        return embedded.getClob(name);
    }

    /**
     * {@inheritDoc}
     */
    public Array getArray(String name) throws SQLException {
        return embedded.getArray(name);
    }

    /**
     * {@inheritDoc}
     */
    public Date getDate(String name, Calendar cal)
        throws SQLException {
        return embedded.getDate(name, cal);
    }

    /**
     * {@inheritDoc}
     */
    public Time getTime(String name, Calendar cal)
        throws SQLException {
        return embedded.getTime(name, cal);
    }

    /**
     * {@inheritDoc}
     */
    public Timestamp getTimestamp(String name, Calendar cal)
        throws SQLException {
        return embedded.getTimestamp(name, cal);
    }

    /**
     * {@inheritDoc}
     */
    public URL getURL(String name) throws SQLException {
        return embedded.getURL(name);
    }
    
    /**
     * Represents the meta information about a Out parameter.
     * OutParamMetadata
     * @version $Rev$
     */
    class OutParamMetadata {
        private int type;
        private int scale;
        private String typeName;
        public static final int NO_SCALE = -1;
        public static final String NONE = "NONE";
        
        /**
         * Default contructor
         * @param t the SQL type code defined by <code>java.sql.Types</code>.
         * @param s the desired number of digits to the right of the
         * decimal point.  It must be greater than or equal to zero.
         * @param tName the fully-qualified name of an SQL structured type
         */
        public OutParamMetadata(int t, int s, String tName) {
            type = t;
            scale = s;
            typeName = tName;
        }
        
        /**
         * Constructs metadata with a Typename
         * @param t the SQL type code defined by <code>java.sql.Types</code>.
         * @param tName the fully-qualified name of an SQL structured type
         */
        public OutParamMetadata(int t, String tName) {
            this(t, NO_SCALE, tName);
        }

        
        /**
         * Constructs metadata with a Typename
         * @param t the SQL type code defined by <code>java.sql.Types</code>.
         * @param s the desired number of digits to the right of the
         * decimal point.  It must be greater than or equal to zero.
         */
        public OutParamMetadata(int t, int s) {
            this(t, s, NONE);
        }
        /**
         * Constructs metadata with a Typename
         * @param t the SQL type code defined by <code>java.sql.Types</code>.
         */
        public OutParamMetadata(int t) {
            this(t, NO_SCALE, NONE);
        }

        /**
         * @return Returns the scale.
         */
        public int getScale() {
            return scale;
        }
        
        /**
         * @return Returns the type.
         */
        public int getType() {
            return type;
        }
     
        /**
         * @return Returns the typeName.
         */
        public String getTypeName() {
            return typeName;
        }
        
        public String toString() {
            return "type: " + TypeConverter.convert(type) + " scale: " + scale +
                   " type name: " + typeName;
        }
    }

    public Object getObject(int i, Map<String, Class<?>> map)
        throws SQLException {
        return embedded.getObject(i, map);
    }

    public Object getObject(String name, Map<String, Class<?>> map)
        throws SQLException {
        return embedded.getObject(name, map);
    }

    public RowId getRowId(int i) throws SQLException {
        return embedded.getRowId(i);
    }

    public RowId getRowId(String name) throws SQLException {
        return embedded.getRowId(name);
    }

    public void setRowId(String name, RowId x) throws SQLException {
        embedded.setRowId(name, x);
    }

    public void setNString(String name, String value) throws SQLException {
        embedded.setNString(name, value);
    }

    public void setNCharacterStream(String name, Reader reader,
            long length) throws SQLException {
        embedded.setNCharacterStream(name,  reader, length);
    }

    public void setNClob(String name, NClob value) throws SQLException {
        embedded.setNClob(name, value);
    }

    public void setClob(String name, Reader reader, long length)
        throws SQLException {
        embedded.setClob(name,  reader, length);
    }

    public void setBlob(String name, InputStream input, long length)
        throws SQLException {
        embedded.setBlob(name, input, length);
    }

    public void setNClob(String name, Reader reader, long length)
        throws SQLException {
        embedded.setNClob(name, reader, length);
    }

    public NClob getNClob(int i) throws SQLException {
        return embedded.getNClob(i);
    }

    public NClob getNClob(String name) throws SQLException {
        return embedded.getNClob(name);
    }

    public void setSQLXML(String name, SQLXML xmlObject)
        throws SQLException {
        embedded.setSQLXML(name, xmlObject);
    }

    public SQLXML getSQLXML(int i) throws SQLException {
        return embedded.getSQLXML(i);
    }

    public SQLXML getSQLXML(String name) throws SQLException {
        return embedded.getSQLXML(name);
    }

    public String getNString(int i) throws SQLException {
        return embedded.getNString(i);
    }

    public String getNString(String name) throws SQLException {
        return embedded.getNString(name);
    }

    public Reader getNCharacterStream(int i) throws SQLException {
        return embedded.getNCharacterStream(i);
    }

    public Reader getNCharacterStream(String name) throws SQLException {
        return embedded.getNCharacterStream(name);
    }

    public Reader getCharacterStream(int i) throws SQLException {
        return embedded.getCharacterStream(i);
    }

    public Reader getCharacterStream(String name) throws SQLException {
        return embedded.getCharacterStream(name);
    }

    public void setBlob(String name, Blob x) throws SQLException {
        embedded.setBlob(name,  x);
    }

    public void setClob(String name, Clob x) throws SQLException {
        embedded.setClob(name, x);
    }

    public void setAsciiStream(String name, InputStream input, long length)
        throws SQLException {
        embedded.setAsciiStream(name, input, length);
    }

    public void setBinaryStream(String name, InputStream input, long length)
        throws SQLException {
        embedded.setBinaryStream(name, input, length);
    }

    public void setCharacterStream(String name, Reader reader,
            long length) throws SQLException {
        embedded.setCharacterStream(name, reader);
    }

    public void setAsciiStream(String name, InputStream input)
        throws SQLException {
        embedded.setAsciiStream(name, input);
    }

    public void setBinaryStream(String name, InputStream input)
        throws SQLException {
        embedded.setBinaryStream(name, input);
    }

    public void setCharacterStream(String name, Reader reader)
        throws SQLException {
        embedded.setCharacterStream(name, reader);
    }

    public void setNCharacterStream(String name, Reader reader)
        throws SQLException {
        embedded.setNCharacterStream(name, reader);
    }

    public void setClob(String name, Reader reader) throws SQLException {
        embedded.setClob(name,  reader);
    }

    public void setBlob(String name, InputStream input) throws SQLException {
        embedded.setBlob(name, input);
    }

    public void setNClob(String name, Reader reader)
        throws SQLException {
        embedded.setNClob(name, reader);
    }

    public <T> T getObject(int i, Class<T> type)
        throws SQLException {
        return embedded.getObject(i, type);
    }

    public <T> T getObject(String name, Class<T> type)
        throws SQLException {
        return embedded.getObject(name, type);
    }

    public void setRowId(int i, RowId x) throws SQLException {
        embedded.setRowId(i, x);
    }

    public void setNString(int i, String value)
        throws SQLException {
        embedded.setNString(i,  value);
    }

    public void setNCharacterStream(int i, Reader reader, long length)
        throws SQLException {
        embedded.setNCharacterStream(i, reader, length);
    }

    public void setNClob(int i, NClob value) throws SQLException {
        embedded.setNClob(i, value);
    }

    public void setClob(int i, Reader reader, long length)
        throws SQLException {
        embedded.setClob(i, reader, length);
    }

    public void setBlob(int i, InputStream input, long length)
        throws SQLException {
        embedded.setBlob(i, input, length);
    }

    public void setNClob(int i, Reader reader, long length)
        throws SQLException {
        embedded.setNClob(i, reader, length);
    }

    public void setSQLXML(int i, SQLXML xmlObject)
        throws SQLException {
        embedded.setSQLXML(i, xmlObject);
    }

    public void setAsciiStream(int i, InputStream input, long length)
        throws SQLException {
        embedded.setAsciiStream(i,  input, length);
    }

    public void setBinaryStream(int i, InputStream input, long length)
        throws SQLException {
        embedded.setBinaryStream(i,  input, length);
    }

    public void setCharacterStream(int i, Reader reader, long length)
        throws SQLException {
        embedded.setCharacterStream(i, reader, length);
    }

    public void setAsciiStream(int i, InputStream input) throws SQLException {
        embedded.setAsciiStream(i, input);
    }

    public void setBinaryStream(int i, InputStream input) throws SQLException {
        embedded.setBinaryStream(i, input);
    }

    public void setCharacterStream(int i, Reader reader) throws SQLException {
        embedded.setCharacterStream(i, reader);
    }

    public void setNCharacterStream(int i, Reader reader) throws SQLException {
        embedded.setNCharacterStream(i, reader);
    }

    public void setClob(int i, Reader reader) throws SQLException {
        embedded.setClob(i,  reader);
    }

    public void setBlob(int i, InputStream input) throws SQLException {
        embedded.setBlob(i, input);
    }

    public void setNClob(int i, Reader reader) throws SQLException {
        embedded.setNClob(i,  reader);
    }

    public boolean isClosed() throws SQLException {
        return embedded.isClosed();
    }

    public void setPoolable(boolean poolable) throws SQLException {
        embedded.setPoolable(poolable);
    }

    public boolean isPoolable() throws SQLException {
        return embedded.isPoolable();
    }

    public void closeOnCompletion() throws SQLException {
        embedded.closeOnCompletion();
    }

    public boolean isCloseOnCompletion() throws SQLException {
        return embedded.isCloseOnCompletion();
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return embedded.unwrap(iface);
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return embedded.isWrapperFor(iface);
    }
}
